{"issue":{"title":"[CF 172] lua scripting support (eg. custom conditons) ","body":" <p>I would like to see scripting support added. The Idea came up to me uppon reading <a href=\"http://shadowpriest.com/viewtopic.php?p=251975#p251975\" rel=\"nofollow\">this thread</a> where someone 1st posted a Tukui_Filger patch, and later another one took the tiny patch and created a Weak Auras config and a pitbull script from it. In the case of this thread, the users are interested in information displayed in a buffs tooltip. This is the posted lua script for pitbull</p><div><div><div>\n\n```\nlocal ES = CreateFrame( \"GameTooltip\", \"ES\", nil, \"GameTooltipTemplate\" );\r\nES:SetOwner( WorldFrame, \"ANCHOR_NONE\" );\r\nlocal eson = UnitBuff(\"player\", \"Empowered Shadow\")\r\nif eson then\r\nES:SetUnitBuff(\"player\", eson)\r\n    local text = ESTextLeft2:GetText()\r\n    text = string.match(text, \"%d+\")\r\n    return text   \r\nend\r\nES:Hide()\r\n\n```\n</div></div>\r\n</div>\r\n<p>This script could be easily modified to return true or false to show above or below a certain trashhold. This would be the way i would think about custom conditions: An abstract function the user could implement which should return an boolean value to determine whether the condition is true or false.<br></p> \n<br>\n\n> Posted by CurseForge user <a href=\"https://wow.curseforge.com/members/Twister\">Twister</a> | Imported from CurseForge issue <a href=\"https://wow.curseforge.com/projects/tellmewhen/issues/172\">#172</a> | <a href=\"https://github.com/tmw-issue-import/dump/blob/master/html/172.html\">Raw</a>","closed":true,"closed_at":"2011-04-30T05:11:43Z","created_at":"2011-04-18T21:29:58Z","updated_at":"2011-04-30T05:11:43Z","labels":["enhancement","resolved"]},"comments":[{"body":" <p>Funny that you should post this, because I have been meaning to do this for a while. The only reason that I haven't is because I'm not sure how user-friendly it needs to be. Currently, this is what a typical condition function looks like after it has been compiled:</p>\r\n<div><div><div>\n\n```\nif not ((UnitHealth(\"pet\")/UnitHealthMax(\"pet\") &lt; 0.61)or ((GetPetHappiness() or 0) &lt; 3)and(nil == UnitIsDeadOrGhost(\"pet\"))) then\r\n\t\tTellMeWhen_Group7_Icon6:SetAlpha(0)\r\n\t\treturn true\r\n\tend\r\n\n```\n</div></div>\r\n</div><p>All condition functions have their metatable set to TMW.CNDT.Env, so any variables or functions, including the icon TellMeWhen_Group7_Icon6, must be defined there.\r\nSimple conditions such as that one are created from strings, such as this one for health:</p>\r\n<div><div><div>\n\n```\n[[UnitHealth(c.Unit)/UnitHealthMax(c.Unit) c.Operator c.Level]]\r\n\n```\n</div></div>\r\n</div><p>Now, some conditions make use of helper functions because they do more complex things than can be done inside an \"if (...) then ... end\" check. here is one such condition (the buff condition):</p>\r\n<div><div><div>\n\n```\n[[AuraStacks(c.Unit, c.NameName, \"HELPFUL\") c.Operator c.Level]]\r\n--------------------------------------------------------------------------------------------------------\r\nlocal function AuraStacks(unit, name, filter)\r\n\tlocal buffName, _, _, count = UnitAura(unit, name, nil, filter)\r\n\tif not buffName then\r\n\t\treturn 0\r\n\telseif buffName and count == 0 then\r\n\t\treturn 1\r\n\telse\r\n\t\treturn count\r\n\tend\r\nend\r\n\n```\n</div></div>\r\n</div><p>You example is one such case where an external helper function would be extremely helpful (but not required, here is that functionality in a normal condition format (wrap it in [[]] to make it a string, I didn't here for syntax highlighting):</p>\r\n<div><div><div>\n\n```\nnot CreateFrame( \"GameTooltip\", \"ES\", nil, \"GameTooltipTemplate\" ):SetOwner( WorldFrame, \"ANCHOR_NONE\" ) and not ES:SetUnitBuff(\"player\", (UnitBuff(\"player\", c.NameName) or \"\")) and (tonumber(strmatch((ESTextLeft2:GetText() or \"\"), \"%d+\")) c.Operator c.Level) and not ES:Hide()\r\n\n```\n</div></div>\r\n</div><p>)\r\nBut obviously, that has horrible readability, and it also creates a new frame every single time the condition is checked. The ultimate question is this: should users create helper functions externally with something like _DevPad or Hack (and then store them in TMW.CNDT.Env), or should I allow users to make their custom condition in the format of a regular function (\"if (...) then return true else return false end\") and then have the addon create and manage these for the user, or should I implement some sort of extensive Lua editor into TMW that allows them to define and associate functions with custom conditions. Personally, I am leaning towards the first option for a few reasons:</p>\r\n<ol><li>It allows users to manage their own efficiency (not creating a new frame every call, just scope one into the function, they can also upvalue whatever they need, etc.)\r\n</li><li>It is easiest for me to implement\r\n</li><li>It sticks with the existing format of conditions and condition functions, so I don't really have to do anything. (Isn't this the same as #2? I just wanted three points)\r\n</li><li>I worded the last 2 choices pretty poorly.</li></ol> <div class=\"project-issue-comment-body-modified\"> </div> \n<br>\n\n> Posted by CurseForge user <a href=\"https://wow.curseforge.com/members/Cybeloras\">Cybeloras</a>","created_at":"2011-04-18T22:09:26Z"}]}