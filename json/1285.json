{"issue":{"title":"[CF 1285] Aura tracking branch (updated) ","body":" <p>New url for repository is here <a href=\"https://wow.curseforge.com/addons/tellmewhen/repositories/auratracker3/\" rel=\"nofollow\">https://wow.curseforge.com/addons/tellmewhen/repositories/auratracker3/</a></p><p>Can you point me to where I could find in the source code the event handling for when a icon or condition is enabled/disabled/deleted or has the spell parameters changed?</p><p>Also, I saw another ticket about feral bleed strength, and wanted to share another library I wrote based on the aura tracking one that handles the logic for that: <a href=\"https://www.wowace.com/addons/libferalbleeds/\" rel=\"nofollow\">https://www.wowace.com/addons/libferalbleeds/</a></p> \n<br>\n\n> Posted by CurseForge user <a href=\"https://wow.curseforge.com/members/srobins6\">srobins6</a> | Imported from CurseForge issue <a href=\"https://wow.curseforge.com/projects/tellmewhen/issues/1285\">#1285</a> | <a href=\"https://github.com/tmw-issue-import/dump/blob/master/html/1285.html\">Raw</a>","closed":true,"closed_at":"2016-11-26T23:19:16Z","created_at":"2016-08-23T17:04:10Z","updated_at":"2016-11-26T23:19:16Z","labels":["enhancement"]},"comments":[{"body":" <p>When you ask for the event handling for those things, do you mean during configuration? The same with spell parameters - do you mean the \"what to track\" input in icon configuration?</p>\r\n<p>I'm happy to help, but it might be more helpful if I knew what your end goal was in asking for this.</p> <div class=\"project-issue-comment-body-modified\"> </div> \n<br>\n\n> Posted by CurseForge user <a href=\"https://wow.curseforge.com/members/Cybeloras\">Cybeloras</a>","created_at":"2016-08-26T05:30:26Z"},{"body":" <p><cite>@<a href=\"https://github.com/tmw-issue-import/TellMeWhen/issues?q=%5BCF%201285%5D+in%3Atitle\" rel=\"nofollow\">Cybeloras</a>: <a href=\"https://github.com/tmw-issue-import/TellMeWhen/issues?q=%5BCF%201285%5D+in%3Atitle\" rel=\"nofollow\">Go</a></cite></p>\r\n<p>Yes exactly this, when users are doing config of the spells that are being tracked.</p>\r\n<p>I wrote my library so that it stops tracking anything that is no longer needed to be tracked, and then wipes all recorded data for that spell as soon as nothing needs it. Like if I called the library from libstub from both tellmewhen, and some other addon, and both of them told the library they wanted to track moonfires applied by the player, it would register both of those requests, and wouldn't stop tracking it until both sources requested it to. </p>\r\n<p>And my overall goal is to replace the existing tellmewhen logic for all buff tracking with my library so that pandemic refreshes can be calculated without having redundant tracking. </p> <div class=\"project-issue-comment-body-modified\"> </div> \n<br>\n\n> Posted by CurseForge user <a href=\"https://wow.curseforge.com/members/srobins6\">srobins6</a>","created_at":"2016-08-26T06:42:32Z"},{"body":" <p>If that's the case, then you don't want to be watching for when things happen during configuration. There are lots of things that this would miss. For example, a group's icons stop updating because the player switched to a spec that the group is configured to not be active with. Or, an icon is imported from an external source. </p>\r\n<p>The best way to do this would be to listen for TMW_GLOBAL_UPDATE and unregister everything that TMW has requested when that happens. Then, as things get setup again, do your re-registration there.</p>\r\n<p>For the aura percentage conditions, you should be doing that registration in the funcstr method on the condition, looking roughly like this:</p>\r\n<div>\n\n```\nfuncstr = function(c)\r\n\t\tTMW.AuraTracker:Track(TMW:GetSpells(c.Name).First, \"HELPFUL\" .. (c.Checked and \" PLAYER\" or \"\"))\r\n\t\t\r\n\t\treturn [[AuraDur(c.Unit, c.NameFirst, c.NameString, \"HELPFUL]] .. (c.Checked and \" PLAYER\" or \"\") .. [[\") c.Operator c.Level]]\r\n\tend,\r\n\n```\n</div> <div class=\"project-issue-comment-body-modified\"> <hr> <span class=\"e-infoLabel\">Edited</span><span> <abbr class=\"tip standard-date standard-datetime\" title=\"08 27 2016 14:30:21 (CST) (UTC-5:00)\" data-epoch=\"1472326221\">Aug 27, 2016</abbr></span> </div> \n<br>\n\n> Posted by CurseForge user <a href=\"https://wow.curseforge.com/members/Cybeloras\">Cybeloras</a>","created_at":"2016-08-27T19:30:03Z"},{"body":" <p>In regards to replacing all TMW's buff logic with your library, I can't say that I would be in favor of this. Tracking the percentage of auras should be fairly uncommon thing - just look at how long it took to get a request to put the functionality back in after I took it out. In most cases it isn't even needed since you can determine the 30% mark of the vast majority of things with a calculator.</p>\r\n<p>1 year, 9 months, and 4 days passed between when I took these out and when I put them back in after I got a single request to do so. This suggests that basically nobody cared about these conditions in the first place. I don't think the minor performance impact of your library tracking these things individually is worth imposing the overhead of your library on the entirety of TMW, where buff tracking is already pretty well optimized.</p>\r\n<p>A library for caching buff/debuff information isn't a new idea - it goes back at least as far as 2007: <a href=\"https://forums.wowace.com/showthread.php?t=15310\" rel=\"nofollow\">https://forums.wowace.com/showthread.php?t=15310</a>. I've also written my own attempt at one of these libraries, but I eventually scrapped it when I realized how bad the overhead (both memory and CPU) was - there was effectively no performance gain. User taledin (from that 2007 thread) mentioned back in 2009 that work was under way on a LibUnitAura, but this is the only record that I can find of it, suggesting that this attempt also never saw the light of day once the issues with such a project were realized: <a href=\"http://infobot.rikers.org/#wowace/20090905.html.gz\" rel=\"nofollow\">http://infobot.rikers.org/%23wowace/20090905.html.gz</a></p>\r\n<p>For cases like this where you need to determine information that isn't available through the API, a library is perhaps the right answer, but in the general case, it often adds more overhead than what it's worth.</p> <div class=\"project-issue-comment-body-modified\"> </div> \n<br>\n\n> Posted by CurseForge user <a href=\"https://wow.curseforge.com/members/Cybeloras\">Cybeloras</a>","created_at":"2016-08-27T20:05:18Z"},{"body":" <p><cite>@<a href=\"https://github.com/tmw-issue-import/TellMeWhen/issues?q=%5BCF%201285%5D+in%3Atitle\" rel=\"nofollow\">Cybeloras</a>: <a href=\"https://github.com/tmw-issue-import/TellMeWhen/issues?q=%5BCF%201285%5D+in%3Atitle\" rel=\"nofollow\">Go</a></cite></p>\r\n<p>I didn't know about these previous attempts, and your points about performance concerns have swayed me. I'll limit the use of this to just the debuff/buff duration % conditions. </p> <div class=\"project-issue-comment-body-modified\"> </div> \n<br>\n\n> Posted by CurseForge user <a href=\"https://wow.curseforge.com/members/srobins6\">srobins6</a>","created_at":"2016-08-27T23:22:46Z"},{"body":" <p>So I've boiled down the actual needed changes to tmw's code to this:</p>\r\n<p>In the main TellMeWhen.lua file, just need to add this. I'm not really sure how to use libstub when it comes to optional dependencies, but if you do it that way instead, like it only loads the aura tracking library if it can find it but doesn't break tmw if it doesn't, the way I wrote the changes to the other file should just revert to your original functions. </p>\r\n<p>TMW.AuraTracker = LibStub(\"LibAuraTracker-1.0\"):New()</p>\r\n<p>In the Core/Conditions/Categories/BuffsDebuffs.lua file, I modified the Env.AuraPercent function and added a new one called Env.AuraPandemicDur which is used in the anticipate function for the two percentage based conditions. Just replace \"AuraDur\" with \"AuraPandemicDur\" in those two anticipate functions. </p>\r\n<p>Let me know if you need any more info from me, or want me to do anything else to make this better for adding to tellmewhen. Thanks! </p>\r\n<p>function Env.AuraPandemicDur(unit, name, nameString, filter) local isID = isNumber[name] local spell = isID or nameString local dur, actualDuration, expirationTime = Env.AuraDur(unit, name, nameString, filter) local duration = (TMW.AuraTracker and TMW.AuraTracker:AuraPandemic(unit, spell, nil, filter)) or actualDuration return dur, duration, expirationTime\r\nend</p>\r\n<p>function Env.AuraPercent(unit, name, nameString, filter) local isID = isNumber[name] local spell = isID or nameString if TMW.AuraTracker then TMW.AuraTracker:Track(spell, filter) end local dur, actualDuration, expirationTime = Env.AuraDur(unit, name, nameString, filter) local percent = TMW.AuraTracker and TMW.AuraTracker:AuraPercent(unit, spell, filter) or expirationTime == 0 and 1 or ((expirationTime - TMW.time) / actualDuration) return percent\r\nend</p> <div class=\"project-issue-comment-body-modified\"> </div> \n<br>\n\n> Posted by CurseForge user <a href=\"https://wow.curseforge.com/members/srobins6\">srobins6</a>","created_at":"2016-09-05T19:43:40Z"},{"body":" <p>While I appreciate the work you did on this, I don't think I'll be implementing it into TMW.</p>\r\n<p>&nbsp;</p>\r\n<p>However, you're welcome to release it as a plugin to TMW.</p>\r\n<p>&nbsp;</p>\r\n<p>All you would need to do is register your own conditions that use your functions instead of the default ones that TMW uses.</p>\r\n<p>Add a dependency of TMW to your .toc file, and then in your addon's code, add the following:</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div>\n\n```\nif not TMW then return end\r\n\r\nlocal TMW = TMW\r\nlocal L = TMW.L\r\n\r\nlocal CNDT = TMW.CNDT\r\nlocal Env = CNDT.Env\r\nlocal isNumber = TMW.isNumber\r\nlocal strlowerCache = TMW.strlowerCache\r\nlocal huge = math.huge\r\n\r\nlocal UnitAura = UnitAura\r\n\r\n\r\nfunction Env.AuraPandemicDur(unit, name, nameString, filter)\r\n    local isID = isNumber[name]\r\n    local spell = isID or nameString\r\n    local dur, actualDuration, expirationTime = Env.AuraDur(unit, name, nameString, filter)\r\n    local duration = (TMW.AuraTracker and TMW.AuraTracker:AuraPandemic(unit, spell, nil, filter)) or actualDuration\r\n    return dur, duration, expirationTime\r\nend\r\n\r\nfunction Env.AuraPandemicPercent(unit, name, nameString, filter)\r\n\tlocal isID = isNumber[name]\r\n    local spell = isID or nameString\r\n    TMW.AuraTracker:Track(spell, filter)\r\n    local dur, actualDuration, expirationTime = Env.AuraDur(unit, name, nameString, filter)\r\n    local percent = TMW.AuraTracker and TMW.AuraTracker:AuraPercent(unit, spell, filter) or expirationTime == 0 and 1 or ((expirationTime - TMW.time) / actualDuration)\r\n    return percent\r\nend\r\n\r\nConditionCategory:RegisterCondition(2.5, \"BUFFPERCPANDEMIC\", {\r\n\ttext = L[\"ICONMENU_BUFF\"] .. \" - \" .. L[\"DURATION\"] .. \" - Pandemic \" .. L[\"PERCENTAGE\"],\r\n\tmin = 0,\r\n\tmax = 100,\r\n\tpercent = true,\r\n\tname = function(editbox)\r\n\t\teditbox:SetTexts(L[\"BUFFTOCHECK\"], L[\"BUFFCNDT_DESC\"])\r\n\tend,\r\n\tuseSUG = true,\r\n\tcheck = function(check)\r\n\t\tcheck:SetTexts(L[\"ONLYCHECKMINE\"], L[\"ONLYCHECKMINE_DESC\"])\r\n\tend,\r\n\tformatter = TMW.C.Formatter.PERCENT,\r\n\ticon = \"Interface\\\\Icons\\\\spell_holy_circleofrenewal\",\r\n\ttcoords = CNDT.COMMON.standardtcoords,\r\n\tfuncstr = function(c)\r\n\t\treturn [[AuraPandemicPercent(c.Unit, c.NameFirst, c.NameString, \"HELPFUL]] .. (c.Checked and \" PLAYER\" or \"\") .. [[\") c.Operator c.Level]]\r\n\tend,\r\n\tevents = function(ConditionObject, c)\r\n\t\treturn\r\n\t\t\tConditionObject:GetUnitChangedEventString(CNDT:GetUnit(c.Unit)),\r\n\t\t\tConditionObject:GenerateNormalEventString(\"UNIT_AURA\", CNDT:GetUnit(c.Unit))\r\n\tend,\r\n\tanticipate = function(c)\r\n        return [[local dur, duration, expirationTime = AuraPandemicDur(c.Unit, c.NameFirst, c.NameString, \"HELPFUL]] .. (c.Checked and \" PLAYER\" or \"\") .. [[\")\r\n\t\tlocal VALUE\r\n\t\tif dur and dur &gt; 0 then\r\n\t\t\tVALUE = expirationTime and (expirationTime - c.Level*duration) or 0\r\n\t\telse\r\n\t\t\tVALUE = 0\r\n\t\tend]]\r\n\tend,\r\n})\n```\n</div>\r\n<p>&nbsp;You will probably want to change the icon for the condition, and you'll want to add the corresponding condition for debuffs as well, but other than that, this should work just fine as a standalone addon. That's why TMW has a documented API in the first place - for things like this.</p> <div class=\"project-issue-comment-body-modified\"> <hr> <span class=\"e-infoLabel\">Edited</span><span> <abbr class=\"tip standard-date standard-datetime\" title=\"11 26 2016 15:15:22 (CST) (UTC-6:00)\" data-epoch=\"1480194922\">Nov 26, 2016</abbr></span> </div> \n<br>\n\n> Posted by CurseForge user <a href=\"https://wow.curseforge.com/members/Cybeloras\">Cybeloras</a>","created_at":"2016-11-26T21:14:31Z"},{"body":" <p>Oh, and you won't need to store your AuraTracker on TMW - you can just store it as a local in that file.</p> <div class=\"project-issue-comment-body-modified\"> <hr> <span class=\"e-infoLabel\">Edited</span><span> <abbr class=\"tip standard-date standard-datetime\" title=\"11 26 2016 15:16:22 (CST) (UTC-6:00)\" data-epoch=\"1480194982\">Nov 26, 2016</abbr></span> </div> \n<br>\n\n> Posted by CurseForge user <a href=\"https://wow.curseforge.com/members/Cybeloras\">Cybeloras</a>","created_at":"2016-11-26T21:15:25Z"}]}