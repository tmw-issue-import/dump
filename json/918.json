{"issue":{"title":"[CF 918] Script error ","body":" <p>-- --------------------<br>-- TellMeWhen<br>-- Originally by Nephthys of Hyjal &lt;lieandswell@yahoo.com&gt;</p><p>-- Other contributions by:<br>--&nbsp; &nbsp; &nbsp; &nbsp; Sweetmms of Blackrock, Oozebull of Twisting Nether, Oodyboo of Mug'thol,<br>--&nbsp; &nbsp; &nbsp; &nbsp; Banjankri of Blackrock, Predeter of Proudmoore, Xenyr of Aszune</p><p>-- Currently maintained by<br>-- Cybeloras of Aerie Peak/Detheroc/Mal'Ganis<br>-- --------------------</p><p>if not TMW then return end</p><p>local TMW = TMW<br>local L = TMW.L<br>local print = TMW.print</p><p>local type, pairs, assert, rawget, wipe =<br>&nbsp; &nbsp; &nbsp; type, pairs, assert, rawget, wipe</p><p>local DogTag = LibStub(\"LibDogTag-3.0\")<br>local LMB = LibStub(\"Masque\", true) or (LibMasque and LibMasque(\"Button\"))<br>local LSM = LibStub(\"LibSharedMedia-3.0\")</p><p>local TEXT = TMW:NewModule(\"TextDisplay\")<br>TMW.TEXT = TEXT</p><p>TEXT.MasqueSkinnableTexts = {<br>&nbsp; &nbsp; -- A list of available SkinAs settings,<br>&nbsp; &nbsp; -- paired with their localized name (for easy use in Ace3ConfigDialog dropdown)<br><br>&nbsp; &nbsp; [\"\"] = L[\"TEXTLAYOUTS_SKINAS_NONE\"],<br><br>&nbsp; &nbsp; Count = L[\"TEXTLAYOUTS_SKINAS_COUNT\"],<br>&nbsp; &nbsp; HotKey = L[\"TEXTLAYOUTS_SKINAS_HOTKEY\"],<br>}</p><p>TMW:RegisterDatabaseDefaults{<br>&nbsp; &nbsp; global = {<br>&nbsp; &nbsp; &nbsp; &nbsp; TextLayouts = {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- Layout defaults<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [\"**\"] = {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 1,&nbsp; &nbsp; &nbsp; &nbsp; -- The number of text displays that this layout handles.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Name&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = \"\",&nbsp; &nbsp; &nbsp; &nbsp; -- The name of this layout. Aesthetic only, doesn't need to be unique.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GUID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = \"\",&nbsp; &nbsp; &nbsp; &nbsp; -- The GUID of this layout. Must be unique for all layouts. This is what the layout is keyed as in its parent table, and is how layouts are identified everywhere.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NoEdit&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = false,&nbsp; &nbsp; -- True if the layout is a default layout and should not be modified.<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- Display defaults<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [\"**\"] = {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StringName&nbsp; &nbsp; &nbsp; &nbsp; = \"\",&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- Name of the string (user-readable)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Name&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = \"Arial Narrow\",&nbsp; &nbsp; -- Name of the Font (Stupid key for this setting, but it dates back to antiquity)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Size&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 12,&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- Font size<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Justify&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = \"CENTER\",&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; --<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Outline&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = \"THICKOUTLINE\",&nbsp;&nbsp; -- Font outline<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Shadow&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0,<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Anchors = {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; n = 1,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [\"**\"] = {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- Anchor setting<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 0,&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- Anchor setting<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; point&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = \"CENTER\",&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; -- Anchor setting<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; relativeTo&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; = \"\",&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- Anchor setting<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; relativePoint&nbsp;&nbsp; &nbsp; = \"CENTER\",&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; -- Anchor setting<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DefaultText&nbsp; &nbsp; &nbsp; &nbsp; = \"\",&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; --<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SkinAs&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = \"\",&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; --<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- The only time this layout should ever get used is if a view doesn't declare any default layout for itself.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- It has no displays and cannot be edited. It should also be hidden from the text layout configuration in TMW's main options.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [\"\"] = {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Name = L[\"TEXTLAYOUTS_DEFAULTS_NOLAYOUT\"],<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GUID = \"\",<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NoEdit = true,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; n = 0,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br>&nbsp; &nbsp; &nbsp; &nbsp; },<br>&nbsp; &nbsp; },<br>}</p><p>TMW:MergeDefaultsTables({<br>&nbsp; &nbsp; SettingsPerView = {<br>&nbsp; &nbsp; &nbsp; &nbsp; [\"**\"] = {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- Fall back on the blank layout if an IconView does not explicitly define a layout.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TextLayout = \"\",<br>&nbsp; &nbsp; &nbsp; &nbsp; },<br>&nbsp; &nbsp; },<br>}, TMW.Group_Defaults)</p><p>TMW:MergeDefaultsTables({<br>&nbsp; &nbsp; SettingsPerView = {<br>&nbsp; &nbsp; &nbsp; &nbsp; [\"**\"] = {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- The table of texts that correspond to the displays defined by the text layout.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Texts = {},<br>&nbsp; &nbsp; &nbsp; &nbsp; },<br>&nbsp; &nbsp; },<br>}, TMW.Icon_Defaults)</p><p>-- -------------------<br>-- SETTINGS UPGRADES<br>-- -------------------</p><p>TMW:RegisterUpgrade(70010, {<br>&nbsp; &nbsp; recursiveReplaceLayoutGUIDs = function(self, table, GUIDmap)<br>&nbsp; &nbsp; &nbsp; &nbsp; for k, v in pairs(table) do<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if type(v) == \"table\" then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self:recursiveReplaceLayoutGUIDs(v, GUIDmap)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; elseif k == \"TextLayout\" and GUIDmap[v] then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; table[k] = GUIDmap[v]<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; end,</p><p>&nbsp; &nbsp; profile = function(self, profile, profileName)<br>&nbsp; &nbsp; &nbsp; &nbsp; local GUIDmap = {}</p><p>&nbsp; &nbsp; &nbsp; &nbsp; for GUID, layout in pairs(profile.TextLayouts) do<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if type(layout) == \"table\" and not layout.NoEdit and type(layout.GUID) == \"string\" then</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if not layout.GUID:match(\"^TMW:textlayout\") then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- Change the GUID into the new GUID syntax.</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local newGUID = \"TMW:textlayout:\" .. layout.GUID</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GUIDmap[GUID] = newGUID<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; layout.GUID = newGUID<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if not rawget(TMW.db.global.TextLayouts, layout.GUID) then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- The layout doesn't already exist, so just put it straight in.</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; layout.Name = layout.Name .. \" (\" .. FROM .. \" \" .. profileName .. \")\"<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TMW:CopyTableInPlaceWithMeta(layout, TMW.db.global.TextLayouts[layout.GUID])</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- Upgrade the new layout manually. This is required because this possibly un-upgraded<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- layout will be getting mixed into layouts whose version is tracked by the global<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- version number. When we are upgrading a profile, global upgrades have already<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- happened, so the layout we are sticking into global.TextLayouts will never get<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- old upgrades.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TMW:DoUpgrade(\"textlayout\", profile.Version, layout, layout.GUID)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- The layout does already exist.</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local existingName = TMW.db.global.TextLayouts[layout.GUID].Name<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TMW.db.global.TextLayouts[layout.GUID].Name = \"\"<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local layoutName = layout.Name<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; layout.Name = \"\"</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- Check to see if it is exactly the same as the existing layout.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- In order to properly compare, we have to copy the old layout<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- into a new table so that all the database metatables will be in place.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local layoutWithMetatables = TMW:CopyTableInPlaceWithMeta(layout, TMW.db.global.TextLayouts[\"\\000\"])<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TMW.db.global.TextLayouts[\"\\000\"] = nil</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local comparison = TMW:DeepCompare(TMW.db.global.TextLayouts[layout.GUID], layoutWithMetatables)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TMW.db.global.TextLayouts[layout.GUID].Name = existingName<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; layout.Name = layoutName</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if comparison then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- The existing layout is the same. Do nothing.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- The existing layout is different. Give it a new GUID and then stick it in.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local newGUID = TMW:GenerateGUID(\"textlayout\", TMW.CONST.GUID_SIZE)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GUIDmap[GUID] = newGUID<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; layout.GUID = newGUID<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; layout.Name = layout.Name .. \" (\" .. FROM .. \" \" .. profileName .. \")\"</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TMW:CopyTableInPlaceWithMeta(layout, TMW.db.global.TextLayouts[layout.GUID])</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- See above for an explanation of this upgrade.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TMW:DoUpgrade(\"textlayout\", profile.Version, layout, layout.GUID)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; end</p><p>&nbsp; &nbsp; &nbsp; &nbsp; profile.TextLayouts = nil</p><p>&nbsp; &nbsp; &nbsp; &nbsp; self:recursiveReplaceLayoutGUIDs(profile, GUIDmap)<br>&nbsp; &nbsp; end<br>})</p><p>TMW:RegisterUpgrade(60448, {<br>&nbsp; &nbsp; textlayout = function(self, settings, GUID)<br>&nbsp; &nbsp; &nbsp; &nbsp; if not settings.NoEdit then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for i, displaySettings in ipairs(settings) do<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; displaySettings.Anchors.n = 1<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local point = displaySettings.point or \"CENTER\"<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; displaySettings.Justify = point:match(\"LEFT\") or point:match(\"RIGHT\") or \"CENTER\"<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; displaySettings.Anchors[1].x&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = displaySettings.x or 0<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; displaySettings.Anchors[1].y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = displaySettings.y or 0<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; displaySettings.Anchors[1].point&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = displaySettings.point or \"CENTER\"<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; displaySettings.Anchors[1].relativePoint&nbsp;&nbsp; &nbsp; = displaySettings.relativePoint or \"CENTER\"<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; displaySettings.x&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = nil<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; displaySettings.y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = nil<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; displaySettings.point&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = nil<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; displaySettings.relativePoint&nbsp;&nbsp; &nbsp; = nil<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; end,<br>})</p><p>TMW:RegisterUpgrade(60338, {<br>&nbsp; &nbsp; -- I decided to change [Stacks] to return numbers instead of strings<br>&nbsp; &nbsp; icon = function(self, ics)<br>&nbsp; &nbsp; &nbsp; &nbsp; for viewName, settingsPerView in pairs(ics.SettingsPerView) do<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for displayID, text in pairs(settingsPerView.Texts) do<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; settingsPerView.Texts[displayID] = text<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; :gsub(\"(Stacks[^:]-:Hide)%('0'%)\", \"%1(0)\")<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; :gsub(\"(Stacks[^:]-:Hide)%('0', '1'%)\", \"%1(0, 1)\")<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; end,<br>&nbsp; &nbsp; textlayout = function(self, settings, GUID)<br>&nbsp; &nbsp; &nbsp; &nbsp; -- I decided to change [Stacks] to return numbers instead of strings<br>&nbsp; &nbsp; &nbsp; &nbsp; for i, displaySettings in ipairs(settings) do<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; displaySettings.DefaultText = displaySettings.DefaultText<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; :gsub(\"(Stacks[^:]-:Hide)%('0'%)\", \"%1(0)\")<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; :gsub(\"(Stacks[^:]-:Hide)%('0', '1'%)\", \"%1(0, 1)\")<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; end,<br>})</p><p>TMW:RegisterUpgrade(60317, {<br>&nbsp; &nbsp; textlayout = function(self, settings, GUID)<br>&nbsp; &nbsp; &nbsp; &nbsp; -- A bug with importing text layouts led them to have their Name attribute set as a table<br>&nbsp; &nbsp; &nbsp; &nbsp; -- (Happened because Name was getting set to nil, and was getting recreated as a table through metamethods)<br><br>&nbsp; &nbsp; &nbsp; &nbsp; if type(settings.Name) == \"table\" then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; settings.Name = \"Sorry, the name of this layout was lost.\"<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; end<br>})</p><p>TMW:RegisterUpgrade(60303, {<br>&nbsp; &nbsp; icon = function(self, ics)<br>&nbsp; &nbsp; &nbsp; &nbsp; -- The setting to trigger fallback on groups is nil now, not \"\"<br>&nbsp; &nbsp; &nbsp; &nbsp; -- (icon settings per view don't define a default TextLayout,<br>&nbsp; &nbsp; &nbsp; &nbsp; -- only groups do, so this will actually work and won't cause fallback<br>&nbsp; &nbsp; &nbsp; &nbsp; -- on defaults by setting it nil because the default is also nil)<br><br>&nbsp; &nbsp; &nbsp; &nbsp; for viewName, settingsPerView in pairs(ics.SettingsPerView) do<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if settingsPerView.TextLayout == \"\" then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; settingsPerView.TextLayout = nil<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; end<br>})</p><p>TMW:RegisterUpgrade(60038, {<br>&nbsp; &nbsp; group = function(self, gs)<br>&nbsp; &nbsp; &nbsp; &nbsp; gs.Fonts = nil<br>&nbsp; &nbsp; end<br>})</p><p>TMW:RegisterUpgrade(60029, {<br>&nbsp; &nbsp; textlayout = function(self, settings, GUID)<br>&nbsp; &nbsp; &nbsp; &nbsp; -- For some reason a lot of text layouts are missing quotes.<br>&nbsp; &nbsp; &nbsp; &nbsp; -- (This may just be in my own settings as an artifact of early testing; but could also be in other people who alpha tested)<br>&nbsp; &nbsp; &nbsp; &nbsp; -- It also changed to not hide a stack of '1'.<br>&nbsp; &nbsp; &nbsp; &nbsp; for i, displaySettings in ipairs(settings) do<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if displaySettings.DefaultText == \"[Stacks:Hide(0, 1)]\"<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; or displaySettings.DefaultText == \"[Stacks:Hide('0', '1')]\"<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; or displaySettings.DefaultText == \"[Stacks:Hide('0')]\" then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; displaySettings.DefaultText = \"[Stacks:Hide(0)]\"<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; end,<br>})</p><p>TMW:RegisterUpgrade(51019, {<br>&nbsp; &nbsp; textlayout = function(self, settings, GUID)<br>&nbsp; &nbsp; &nbsp; &nbsp; -- I don't know why this layout exists, but I know it was my fault, so I am going to delete it.<br>&nbsp; &nbsp; &nbsp; &nbsp; if GUID == \"icon\" and settings.GUID == \"\" then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TMW.db.global.TextLayouts[GUID] = nil<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TMW.Warn(\"TMW has deleted the invalid text layout keyed as 'icon' that was probably causing errors for you. If you were using it on any of your icons, then I apologize, but you probably weren't because it probably wasn't even named\")<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; end,<br>})</p><p>TMW:RegisterUpgrade(51003, {<br>&nbsp; &nbsp; ---------- Helper methods and data ----------<br>&nbsp; &nbsp; pairs = {<br>&nbsp; &nbsp; &nbsp; &nbsp; -- Matches [displayID] = oldGroupTextSettingsKey<br>&nbsp; &nbsp; &nbsp; &nbsp; [1] = \"Bind\",<br>&nbsp; &nbsp; &nbsp; &nbsp; [2] = \"Count\",<br>&nbsp; &nbsp; },<br><br>&nbsp; &nbsp; -- The old defaults for the Count text (stacks) from the old text system.<br>&nbsp; &nbsp; Count = {<br>&nbsp; &nbsp; &nbsp; &nbsp; ConstrainWidth&nbsp; = false,<br>&nbsp; &nbsp; &nbsp; &nbsp; point&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = \"BOTTOMRIGHT\",<br>&nbsp; &nbsp; &nbsp; &nbsp; relativePoint&nbsp;&nbsp; = \"BOTTOMRIGHT\",<br><br>&nbsp; &nbsp; &nbsp; &nbsp; Name&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = \"Arial Narrow\",<br>&nbsp; &nbsp; &nbsp; &nbsp; Size&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 12,<br>&nbsp; &nbsp; &nbsp; &nbsp; x&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = -2,<br>&nbsp; &nbsp; &nbsp; &nbsp; y&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 2,<br>&nbsp; &nbsp; &nbsp; &nbsp; Outline&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; = \"THICKOUTLINE\",<br>&nbsp; &nbsp; },<br><br>&nbsp; &nbsp; -- The old defaults for the Bind text from the old text system.<br>&nbsp; &nbsp; Bind = {<br>&nbsp; &nbsp; &nbsp; &nbsp; y&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = -2,<br>&nbsp; &nbsp; &nbsp; &nbsp; point&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = \"TOPLEFT\",<br>&nbsp; &nbsp; &nbsp; &nbsp; relativePoint&nbsp;&nbsp; = \"TOPLEFT\",<br><br>&nbsp; &nbsp; &nbsp; &nbsp; Name&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = \"Arial Narrow\",<br>&nbsp; &nbsp; &nbsp; &nbsp; Size&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 12,<br>&nbsp; &nbsp; &nbsp; &nbsp; x&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = -2,<br>&nbsp; &nbsp; &nbsp; &nbsp; Outline&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; = \"THICKOUTLINE\",<br>&nbsp; &nbsp; &nbsp; &nbsp; ConstrainWidth&nbsp; = true,<br>&nbsp; &nbsp; },<br><br>&nbsp; &nbsp; -- <a href=\"http://snippets.luacode.org/snippets/Deep_Comparison_of_Two_Values_3\" rel=\"nofollow\">http://snippets.luacode.org/snippets/Deep_Comparison_of_Two_Values_3</a><br>&nbsp; &nbsp; deepcompare = function(self,t1,t2)<br>&nbsp; &nbsp; &nbsp; &nbsp; local ty1 = type(t1)<br>&nbsp; &nbsp; &nbsp; &nbsp; local ty2 = type(t2)<br>&nbsp; &nbsp; &nbsp; &nbsp; if ty1 ~= ty2 then return false end<br>&nbsp; &nbsp; &nbsp; &nbsp; -- non-table types can be directly compared<br>&nbsp; &nbsp; &nbsp; &nbsp; if ty1 ~= 'table' and ty2 ~= 'table' then return t1 == t2 end<br>&nbsp; &nbsp; &nbsp; &nbsp; for k1,v1 in pairs(t1) do<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local v2 = t2[k1]<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if v2 == nil or not self:deepcompare(v1,v2) then return false end<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; for k2,v2 in pairs(t2) do<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local v1 = t1[k2]<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if v1 == nil or not self:deepcompare(v1,v2) then return false end<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; return true<br>&nbsp; &nbsp; end,<br><br>&nbsp; &nbsp; -- Sets a group to use the specified text layout<br>&nbsp; &nbsp; SetLayoutToGroup = function(self, gs, GUID)<br>&nbsp; &nbsp; &nbsp; &nbsp; gs.SettingsPerView.icon.TextLayout = GUID<br><br>&nbsp; &nbsp; &nbsp; &nbsp; -- the group setting is a fallback for icons, so there is no reason to set the layout for individual icons<br>&nbsp; &nbsp; &nbsp; &nbsp; for iconID, ics in pairs(gs.Icons) do<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ics.SettingsPerView.icon.TextLayout = nil<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; end,<br><br><br>&nbsp; &nbsp; ---------- Upgrade method ----------<br>&nbsp; &nbsp; group = function(self, gs)<br>&nbsp; &nbsp; &nbsp; &nbsp; -- Create a layout table to start storing text layout data for this group in.<br>&nbsp; &nbsp; &nbsp; &nbsp; local layout = TMW.db.global.TextLayouts[0]<br><br>&nbsp; &nbsp; &nbsp; &nbsp; -- We don't actually want to define this as a real text layout yet, so take it out of TextLayouts.<br>&nbsp; &nbsp; &nbsp; &nbsp; TMW.db.global.TextLayouts[0] = nil<br><br>&nbsp; &nbsp; &nbsp; &nbsp; -- The old text system had two displays<br>&nbsp; &nbsp; &nbsp; &nbsp; layout.n = 2<br><br>&nbsp; &nbsp; &nbsp; &nbsp; -- These are constants for each text display:<br>&nbsp; &nbsp; &nbsp; &nbsp; -- Display 1 is the binding/label text<br>&nbsp; &nbsp; &nbsp; &nbsp; layout[1].StringName = L[\"TEXTLAYOUTS_DEFAULTS_BINDINGLABEL\"]<br>&nbsp; &nbsp; &nbsp; &nbsp; layout[1].SkinAs = \"HotKey\"<br><br>&nbsp; &nbsp; &nbsp; &nbsp; -- Display 2 is the stack text<br>&nbsp; &nbsp; &nbsp; &nbsp; layout[2].StringName = L[\"TEXTLAYOUTS_DEFAULTS_STACKS\"]<br>&nbsp; &nbsp; &nbsp; &nbsp; layout[2].DefaultText = \"[Stacks:Hide(0)]\"<br>&nbsp; &nbsp; &nbsp; &nbsp; layout[2].SkinAs = \"Count\"<br><br>&nbsp; &nbsp; &nbsp; &nbsp; for i = 1, layout.n do<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- displaySettings holds the settings for the text layout being created<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local displaySettings = layout[i]<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- settingsKey is the key that corresponds to the old text settings<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local settingsKey = self.pairs[i]<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- source holds the old text settings<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local source = gs.Fonts and gs.Fonts[settingsKey]<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- Iterate over all of the old text settings.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for _, setting in TMW:Vararg(<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"Name\",<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"Size\",<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"x\",<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"y\",<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"point\",<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"relativePoint\",<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"Outline\",<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"OverrideLBFPos\",<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"ConstrainWidth\"<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ) do<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- (not source) :: If the old text settings are nil, then the entire display used all default settings, so inherit from defaults.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- (So Ace3DB purged it completely because it wasn't needed)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- (source[setting] == nil) :: If this specific setting is nil, then it was default, so inherit from defaults.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if not source or source[setting] == nil then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- self[settingsKey][setting] holds the old defaults for the text display we are creating a layout for.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; displaySettings[setting] = self[settingsKey][setting]<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- This setting was defined, so use the setting that was defined for it.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; displaySettings[setting] = source[setting]<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- OverrideLBFPos isn't used anymore, instead SkinAs is set to \"\" (signifying don't skin this display)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if displaySettings.OverrideLBFPos then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; displaySettings.SkinAs = \"\"<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; displaySettings.OverrideLBFPos = nil<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- Fix this typo (MONOCHORME) which has probably been here at least a year without being noticed... until now<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if displaySettings.Outline == \"MONOCHORME\" then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; displaySettings.Outline = \"MONOCHROME\"<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br><br>&nbsp; &nbsp; &nbsp; &nbsp; -- We are done constructing a text layout out of this group's old text settings.<br>&nbsp; &nbsp; &nbsp; &nbsp; -- Now, check and see if there alredy exists a layout with the exact same settings from a previous group's upgrade.<br>&nbsp; &nbsp; &nbsp; &nbsp; for GUID, layoutSettings in pairs(TMW.db.global.TextLayouts) do<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if layoutSettings ~= layout then -- I don't know why this check was written, but leave it in.<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- These three settings don't actually impact the group, so ignore them in the comparison.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- Save them into variables, and then set them to their defaults.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local name, GUID, noedit = layoutSettings.Name, layoutSettings.GUID, layoutSettings.NoEdit<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; layoutSettings.Name, layoutSettings.GUID, layoutSettings.NoEdit = \"\", \"\", false<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- Do the actual comparison to check if the layout we just created is a duplicate of one that already exists.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local isDuplicate = self:deepcompare(layoutSettings, layout)<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- Restore the settings that we just set to defaults.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; layoutSettings.Name, layoutSettings.GUID, layoutSettings.NoEdit = name, GUID, noedit<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if isDuplicate then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- If the layout we just created is a duplicate of another, then set the pre-existing layout to the group.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- The layout we just created just becomes garbage and will get picked up by the gc eventually.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self:SetLayoutToGroup(gs, GUID)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br><br>&nbsp; &nbsp; &nbsp; &nbsp; -- If we've made it to this point, then the layout we just created wasn't a duplicate.<br><br>&nbsp; &nbsp; &nbsp; &nbsp; -- Create a GUID for the new layout and set it.<br>&nbsp; &nbsp; &nbsp; &nbsp; local GUID = TMW:GenerateGUID(\"textlayout\", TMW.CONST.GUID_SIZE)<br>&nbsp; &nbsp; &nbsp; &nbsp; layout.GUID = GUID<br><br>&nbsp; &nbsp; &nbsp; &nbsp; -- Determine a name for the new layout:<br>&nbsp; &nbsp; &nbsp; &nbsp; -- Start with this as the base name.<br>&nbsp; &nbsp; &nbsp; &nbsp; local Name = L[\"TEXTLAYOUTS_DEFAULTS_ICON1\"]<br>&nbsp; &nbsp; &nbsp; &nbsp; repeat<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- Loop until we find a name that isn't used by any other layouts.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local found<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for k, layoutSettings in pairs(TMW.db.global.TextLayouts) do<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if layoutSettings.Name == Name then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- The current name is in use.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; found = true<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- Increase the number at the end of the name (\"Icon Layout 1\" becomes \"Icon Layout 2\", etc...)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Name = TMW.oneUpString(Name) or GUID -- fallback on the GUID if we cant increment the name for some reason<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- Break the inner loop so that we can go through the outer loop again and check if the new name is in use.<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; until not found<br><br>&nbsp; &nbsp; &nbsp; &nbsp; -- A unique name has now been determined. Set it on the layout.<br>&nbsp; &nbsp; &nbsp; &nbsp; layout.Name = Name<br><br>&nbsp; &nbsp; &nbsp; &nbsp; -- Store the layout under the new GUID in the TextLayouts table.<br>&nbsp; &nbsp; &nbsp; &nbsp; TMW.db.global.TextLayouts[GUID] = layout<br><br>&nbsp; &nbsp; &nbsp; &nbsp; -- Set the new layout to the group we are upgrading.<br>&nbsp; &nbsp; &nbsp; &nbsp; self:SetLayoutToGroup(gs, GUID)<br>&nbsp; &nbsp; end,<br>})</p><p>TMW:RegisterUpgrade(51002, {<br>&nbsp; &nbsp; -- This is the upgrade that handles the transition from TMW's ghetto text substitutions to DogTag.<br><br>&nbsp; &nbsp; -- self.translateString is a function defined in the v51002 upgrade in TellMeWhen.lua.<br>&nbsp; &nbsp; -- It is the method that actually converts between the old and new text subs.<br><br>&nbsp; &nbsp; -- This upgrade extends this upgrade to text displays<br>&nbsp; &nbsp; -- (The old static text displays, not the new ones that are the whole purpose of this file.)<br><br>&nbsp; &nbsp; icon = function(self, ics)<br>&nbsp; &nbsp; &nbsp; &nbsp; local BindText = ics.BindText or \"\"<br><br>&nbsp; &nbsp; &nbsp; &nbsp; -- Meta icons and default icons didn't implement BindText, so don't upgrade them.<br>&nbsp; &nbsp; &nbsp; &nbsp; if ics.Type ~= \"meta\" and ics.Type ~= \"\" then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ics.SettingsPerView.icon.Texts[1] = self:translateString(BindText)<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; ics.BindText = nil<br><br>&nbsp; &nbsp; &nbsp; &nbsp; -- The stack text display was static, and it already corresponds to the default text for this text display, so do nothing.<br>&nbsp; &nbsp; &nbsp; &nbsp; -- ics.SettingsPerView.icon.Texts[2] = \"[Stacks:Hide(0)]\"<br>&nbsp; &nbsp; end,<br>})</p><p>TMW:RegisterCallback(\"TMW_UPGRADE_REQUESTED\", function(event, type, version, ...)<br>&nbsp; &nbsp; -- When a global settings upgrade is requested, update all text layouts.<br><br>&nbsp; &nbsp; if type == \"global\" then<br>&nbsp; &nbsp; &nbsp; &nbsp; for GUID, settings in pairs(TMW.db.global.TextLayouts) do<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TMW:DoUpgrade(\"textlayout\", version, settings, GUID)<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; end<br>end)</p><p>function TEXT:GetTextLayoutForIconSettings(gs, ics, view)<br>&nbsp; &nbsp; -- arg3, view, is optional. Defaults to the current view<br><br>&nbsp; &nbsp; view = view or gs.View<br><br>&nbsp; &nbsp; -- Get the GUID defined by the icon for the current IconView<br>&nbsp; &nbsp; local GUID = ics.SettingsPerView[view].TextLayout<br><br>&nbsp; &nbsp; -- If the icon defines the GUID as a blank string,<br>&nbsp; &nbsp; -- it should default to whatever the group defines. (Intended behavior, btw.)<br>&nbsp; &nbsp; if not GUID or GUID == \"\" then<br>&nbsp; &nbsp; &nbsp; &nbsp; GUID = gs.SettingsPerView[view].TextLayout<br>&nbsp; &nbsp; end<br><br>&nbsp; &nbsp; -- Rawget from TextLayouts to see if the layout exists.<br>&nbsp; &nbsp; local layoutSettings = GUID and rawget(TMW.db.global.TextLayouts, GUID)<br><br>&nbsp; &nbsp; local isFallback<br>&nbsp; &nbsp; if not layoutSettings then<br>&nbsp; &nbsp; &nbsp; &nbsp; isFallback = true<br><br>&nbsp; &nbsp; &nbsp; &nbsp; -- If the layout doesn't exist, fall back on the default layout for the current IconView<br>&nbsp; &nbsp; &nbsp; &nbsp; local GroupDefaultsPerView = TMW.Group_Defaults.SettingsPerView<br>&nbsp; &nbsp; &nbsp; &nbsp; GUID = GroupDefaultsPerView[view] and GroupDefaultsPerView[view].TextLayout<br><br>&nbsp; &nbsp; &nbsp; &nbsp; -- If the current IconView doesn't define a default layout (or if it doesn't define DefaultsPerView),<br>&nbsp; &nbsp; &nbsp; &nbsp; -- then fall back on the default for all IconViews, GUID == \"\", the blank layout<br>&nbsp; &nbsp; &nbsp; &nbsp; if not GUID then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; GUID = \"\"<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br><br>&nbsp; &nbsp; &nbsp; &nbsp; -- Attempt to find the layout settings again.<br>&nbsp; &nbsp; &nbsp; &nbsp; layoutSettings = rawget(TMW.db.global.TextLayouts, GUID)<br><br>&nbsp; &nbsp; &nbsp; &nbsp; -- Freak the fuck out if it wasn't found;<br>&nbsp; &nbsp; &nbsp; &nbsp; -- Only happens if a view defines a default layout but doesn't actually define layout itself.<br>&nbsp; &nbsp; &nbsp; &nbsp; assert(layoutSettings, (\"Couldn't find default text layout with GUID %q for IconView %q\"):format(GUID, view))<br>&nbsp; &nbsp; end<br><br>&nbsp; &nbsp; return GUID, layoutSettings, isFallback<br>end</p><p>function TEXT:GetTextLayoutForIcon(icon, view)<br>&nbsp; &nbsp; return TEXT:GetTextLayoutForIconSettings(icon.group:GetSettings(), icon:GetSettings(), view)<br>end</p><p>function TEXT:GetTextFromSettingsAndLayout(Texts, layoutSettings, textID)<br>&nbsp; &nbsp; TMW:ValidateType(2, \"TEXT:GetTextForIconAndLayout()\", Texts, \"table\")<br>&nbsp; &nbsp; TMW:ValidateType(3, \"TEXT:GetTextForIconAndLayout()\", layoutSettings, \"table\")<br>&nbsp; &nbsp; TMW:ValidateType(4, \"TEXT:GetTextForIconAndLayout()\", textID, \"number\")<br><br>&nbsp; &nbsp; local text = Texts[textID]<br><br>&nbsp; &nbsp; if not text then<br>&nbsp; &nbsp; &nbsp; &nbsp; if textID &gt; layoutSettings.n then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; error(\"textID is out of range for the given layout!\", 2)<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br><br>&nbsp; &nbsp; &nbsp; &nbsp; text = layoutSettings[textID].DefaultText<br>&nbsp; &nbsp; end<br><br>&nbsp; &nbsp; return text<br>end</p><p>-- -------------------<br>-- ICON MODULE<br>-- -------------------<br><br>local Texts = TMW:NewClass(\"IconModule_Texts\", \"IconModule\")</p><p>Texts:RegisterConfigPanel_XMLTemplate(400, \"TellMeWhen_TextDisplayOptions\")</p><p>function Texts:OnNewInstance(icon)<br>&nbsp; &nbsp; self.kwargs = {} -- Stores the DogTag kwargs table that will be used by the module for all its text displays/FontStrings.<br>&nbsp; &nbsp; self.fontStrings = {} -- Stores all of the FontStrings that the midle has created.<br><br>&nbsp; &nbsp; self.container = CreateFrame(\"Frame\", nil, icon)<br>&nbsp; &nbsp; self.container:SetAllPoints(icon)<br>&nbsp; &nbsp; self.container:SetFrameLevel(icon:GetFrameLevel() + 3)<br><br>&nbsp; &nbsp; -- We need to make sure that all strings that are Masque skinnable are always created<br>&nbsp; &nbsp; -- so that they can be available to IconModule_IconContainer_Masque when it requests them.<br>&nbsp; &nbsp; -- If Masque isn't installed, then don't bother - we will create them normally on demand.<br>&nbsp; &nbsp; if LMB then<br>&nbsp; &nbsp; &nbsp; &nbsp; for key in pairs(TEXT.MasqueSkinnableTexts) do<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if key ~= \"\" then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local fontString = self:CreateFontString(key)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self:SetSkinnableComponent(key, fontString)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; end<br>end</p><p>function Texts:OnDisable()<br>&nbsp; &nbsp; for id, fontString in pairs(self.fontStrings) do<br><br>&nbsp; &nbsp; &nbsp; &nbsp; DogTag:RemoveFontString(fontString)<br><br>&nbsp; &nbsp; &nbsp; &nbsp; fontString:Hide()<br>&nbsp; &nbsp; end<br>end</p><p>function Texts:CreateFontString(id)<br>&nbsp; &nbsp; local container = self.container<br><br>&nbsp; &nbsp; local fontString = container:CreateFontString(self:GetChildNameBase() .. id, \"ARTWORK\", \"NumberFontNormalSmall\")<br><br>&nbsp; &nbsp; self.fontStrings[id] = fontString<br><br>&nbsp; &nbsp; return fontString<br>end</p><p>function Texts:SetupForIcon(sourceIcon)<br>&nbsp; &nbsp; local icon = self.icon<br><br><br>&nbsp; &nbsp; local Texts = sourceIcon:GetSettingsPerView().Texts<br>&nbsp; &nbsp; local _, layoutSettings = TMW.TEXT:GetTextLayoutForIcon(sourceIcon)<br>&nbsp; &nbsp; self.layoutSettings = layoutSettings<br>&nbsp; &nbsp; self.Texts = Texts<br><br>&nbsp; &nbsp; wipe(self.kwargs)<br>&nbsp; &nbsp; self.kwargs.icon = sourceIcon:GetGUID()<br>&nbsp; &nbsp; self.kwargs.unit = sourceIcon.attributes.dogTagUnit<br>&nbsp; &nbsp; --self.kwargs.shouldcolor = TMW.db.profile.ColorNames<br><br>&nbsp; &nbsp; for _, fontString in pairs(self.fontStrings) do<br>&nbsp; &nbsp; &nbsp; &nbsp; fontString.TMW_QueueForRemoval = true<br>&nbsp; &nbsp; end<br><br>&nbsp; &nbsp; if layoutSettings then<br>&nbsp; &nbsp; &nbsp; &nbsp; local IconModule_IconContainer_Masque = icon:GetModuleOrModuleChild(\"IconModule_IconContainer_Masque\")<br>&nbsp; &nbsp; &nbsp; &nbsp; local isDefaultSkin = (not IconModule_IconContainer_Masque) or IconModule_IconContainer_Masque.isDefaultSkin<br><br>&nbsp; &nbsp; &nbsp; &nbsp; for fontStringID, fontStringSettings in TMW:InNLengthTable(layoutSettings) do<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fontStringID = self:GetFontStringID(fontStringID, fontStringSettings)<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local fontString = self.fontStrings[fontStringID] or self:CreateFontString(fontStringID)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fontString:Show()<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fontString.settings = fontStringSettings<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; --fontString:SetWidth(fontStringSettings.ConstrainWidth and icon:GetWidth() or 0)<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if not LMB or isDefaultSkin or fontStringSettings.SkinAs == \"\" then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- Font<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fontString:SetFont(LSM:Fetch(\"font\", fontStringSettings.Name), fontStringSettings.Size, fontStringSettings.Outline)<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fontString:SetJustifyH(fontStringSettings.Justify)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br><br>&nbsp; &nbsp; &nbsp; &nbsp; for fontStringID, fontStringSettings in TMW:InNLengthTable(layoutSettings) do<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fontStringID = self:GetFontStringID(fontStringID, fontStringSettings)<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local fontString = self.fontStrings[fontStringID] or self:CreateFontString(fontStringID)<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if not LMB or isDefaultSkin or fontStringSettings.SkinAs == \"\" then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -- Position<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fontString:ClearAllPoints()<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local func = fontString.__MSQ_SetPoint or fontString.SetPoint<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for n, anchorSettings in TMW:InNLengthTable(fontStringSettings.Anchors) do<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local relativeTo = anchorSettings.relativeTo<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if relativeTo:sub(1, 2) == \"$$\" then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; relativeTo = tonumber(relativeTo:sub(3))<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if relativeTo &lt;= layoutSettings.n then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local fontStringSettingsOfAnchor = layoutSettings[relativeTo]<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; relativeTo = self:GetFontStringID(relativeTo, fontStringSettingsOfAnchor)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; relativeTo = self.fontStrings[relativeTo]<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; relativeTo = nil<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if not relativeTo then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TMW:Error(\"Couldn't find the anchor %q for icon %q, font string %s\", anchorSettings.relativeTo, icon:GetName(), fontStringID)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; relativeTo = icon<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; relativeTo = icon:GetName() .. relativeTo<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if not _G[relativeTo] then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if self.hasSetupOnce then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TMW:Error(\"Couldn't find the anchor %q for icon %q, font string %s\", anchorSettings.relativeTo, icon:GetName(), fontStringID)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; relativeTo = icon<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; func(fontString, anchorSettings.point, relativeTo, anchorSettings.relativePoint, anchorSettings.x, anchorSettings.y)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; end<br><br>&nbsp; &nbsp; -- TMW_QueueForRemoval gets set to nil for valid stings in OnKwargsUpdated, among other things<br>&nbsp; &nbsp; self:OnKwargsUpdated()<br><br>&nbsp; &nbsp; for fontStringID, fontString in pairs(self.fontStrings) do<br>&nbsp; &nbsp; &nbsp; &nbsp; if fontString.TMW_QueueForRemoval then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fontString.TMW_QueueForRemoval = nil<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DogTag:RemoveFontString(fontString)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fontString:Hide()<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; end<br>&nbsp; &nbsp; self.hasSetupOnce = true<br>end</p><p>function Texts:GetFontStringID(fontStringID, fontStringSettings)<br>&nbsp; &nbsp; local SkinAs = fontStringSettings.SkinAs<br>&nbsp; &nbsp; if SkinAs ~= \"\" then<br>&nbsp; &nbsp; &nbsp; &nbsp; fontStringID = SkinAs<br>&nbsp; &nbsp; end<br>&nbsp; &nbsp; return fontStringID<br>end</p><p>function Texts:OnKwargsUpdated()<br>&nbsp; &nbsp; if self.layoutSettings and self.Texts then<br>&nbsp; &nbsp; &nbsp; &nbsp; for fontStringID, fontStringSettings in TMW:InNLengthTable(self.layoutSettings) do<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local fontString = self.fontStrings[self:GetFontStringID(fontStringID, fontStringSettings)]<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local text = TEXT:GetTextFromSettingsAndLayout(self.Texts, self.layoutSettings, fontStringID)<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if fontString and text and text ~= \"\" then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; local styleString = \"\"<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if fontStringSettings.Outline == \"OUTLINE\" or fontStringSettings.Outline == \"THICKOUTLINE\" or fontStringSettings.Outline == \"MONOCHROME\" then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; styleString = styleString .. (\"[%s]\"):format(fontStringSettings.Outline)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fontString.TMW_QueueForRemoval = nil<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fontString:SetShadowOffset(fontStringSettings.Shadow, -fontStringSettings.Shadow)<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DogTag:AddFontString(fontString, self.icon, styleString .. text, \"TMW;Unit;Stats\", self.kwargs)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; &nbsp; &nbsp; end<br>&nbsp; &nbsp; end<br>end</p><p>function Texts:DOGTAGUNIT(icon, dogTagUnit)<br>&nbsp; &nbsp; if self.kwargs.unit ~= dogTagUnit then<br>&nbsp; &nbsp; &nbsp; &nbsp; self.kwargs.unit = dogTagUnit<br>&nbsp; &nbsp; &nbsp; &nbsp; self:OnKwargsUpdated()<br>&nbsp; &nbsp; end<br>end<br>Texts:SetDataListner(\"DOGTAGUNIT\")</p> \n<br>\n\n> Posted by CurseForge user <a href=\"https://wow.curseforge.com/members/pankL\">pankL</a> | Imported from CurseForge issue <a href=\"https://wow.curseforge.com/projects/tellmewhen/issues/918\">#918</a> | <a href=\"https://github.com/tmw-issue-import/dump/blob/master/html/918.html\">Raw</a>","closed":true,"closed_at":"2014-01-20T21:22:19Z","created_at":"2014-01-20T06:40:01Z","updated_at":"2014-01-20T21:22:19Z","labels":["defect","invalid"]},"comments":[{"body":" <p>Uhhh, what? You just posted the contents of TellMeWhen\\Components\\IconModules\\IconModule_Texts\\Texts.lua. If there is an error, you need to post the error that you are getting. I already have this file.</p> <div class=\"project-issue-comment-body-modified\"> </div> \n<br>\n\n> Posted by CurseForge user <a href=\"https://wow.curseforge.com/members/Cybeloras\">Cybeloras</a>","created_at":"2014-01-20T21:21:55Z"}]}